import { MessageBitConfig } from "@pipeline/report/Serialization";

// raw ID that comes from the platform (e.g 9876554321)
export type RawID = string | number;

// internal ID that is used in the pipeline (incremental)
export type ID = number;

// offset in bytes in a Uint8Array buffer
export type Address = number;

// offset in BITS in a BitBuffer
export type BitAddress = number;

// UTC timestamp
export type Timestamp = number;

// date with format "YYYY-MM-DD"
export type DateStr = string;
// date with format [year, month (1-based), day]
export type DateArr = [number, number, number];

// available platforms
export type Platform = "discord" | "telegram" | "whatsapp";

// available message information
// prettier-ignore
export enum MessageFlags {
    None,
    Reply       = 1 << 0,
    Edited      = 1 << 1,
    Text        = 1 << 2,
    Attachments = 1 << 3,
    Reactions   = 1 << 4,
    Mentions    = 1 << 5,
    
    Last        = 1 << 6,
}

export enum AttachmentType {
    Image,
    ImageAnimated, // (GIFs)
    Video,
    Sticker,
    Audio,
    Document,
    Other,
    Last,
}

export type Word = string;
export type WordIndex = number;

// configuration, set in the UI
export interface ReportConfig {
    platform: Platform;
}

// the generated object after processing
export interface Database {
    config: ReportConfig;
    bitConfig: MessageBitConfig;
    title: string;
    time: {
        minDate: DateArr;
        maxDate: DateArr;
        numDays: number;
        numMonths: number;
    };

    words: Word[];
    channels: Channel[];
    authors: Author[];

    authorsOrder: number[];
    authorsBotCutoff: number;

    serialized?: SerializedData;
}

// additional serialized data (like messages)
export type SerializedData = Uint8Array;

/*
    Names are short to reduce the size when it's transferred from the Worker to the main thread
    It does not help with compression

    I-(Channel/Author) versions are the generated by the parsers
*/

// emitted by parsers
export interface IChannel {
    // name
    n: string;
}

export interface Channel extends IChannel {
    // name searchable
    ns: string;
    // messages location
    msgAddr: Address;
    msgCount: number;
}

// emitted by parsers
export interface IAuthor {
    // name
    n: string;
    // bot
    b?: undefined | true;
    // Discord discriminant (#XXXX)
    d?: number;
    // Discord avatar (user_id/user_avatar)
    da?: string;
}

export interface Author extends IAuthor {
    // name searchable
    ns: string;
}

export interface Emoji {
    // Discord emoji ID (if custom)
    id?: RawID;
    // name (ðŸ”¥ or "custom_emoji")
    n: string;
}

export interface Mention {
    // if possible to connect with an actual author
    id?: ID;
    // mention text ("@user")
    n: string;
}

// emitted by parsers
export interface IMessage {
    id: RawID;
    replyTo?: RawID;
    authorId: ID;
    channelId: ID;
    timestamp: Timestamp;
    timestampEdit?: Timestamp;
    content?: string;
    attachments: AttachmentType[];
    reactions: [Emoji, number][];
}

// stored serialized during generation
export interface IntermediateMessage {
    year: number;
    month: number;
    day: number;
    hour: number;
    authorId: ID;
    langIdx: number;
    sentiment: number;
    words: [WordIndex, number][];
}

// stored serialized on the final data file
// (and what aggregators use)
export interface Message {
    dayIndex: number;
    hour: number;
    authorId: ID;
    langIdx: number;
    sentiment: number;
    words: [WordIndex, number][];
}
